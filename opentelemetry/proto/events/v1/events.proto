// Copyright 2021, OpenTelemetry Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package opentelemetry.proto.events.v1;

import "opentelemetry/proto/common/v1/common.proto";
import "opentelemetry/proto/resource/v1/resource.proto";

option java_multiple_files = true;
option java_package = "io.opentelemetry.proto.events.v1";
option java_outer_classname = "EventsProto";
option go_package = "github.com/open-telemetry/opentelemetry-proto/gen/go/events/v1";

// A collection of InstrumentationLibraryEvents from a Resource.
message ResourceEvents {
  // The resource for the events in this message.
  // If this field is not set then resource info is unknown.
  opentelemetry.proto.resource.v1.Resource resource = 1;

  // A list of InstrumentationLibraryEvents that originate from a resource.
  repeated InstrumentationLibraryEvents instrumentation_library_events = 2;

  // This schema_url applies to the data in the "resource" field. It does not apply
  // to the data in the "instrumentation_library_events" field which have their own
  // schema_url field.
  string schema_url = 3;
}

// A collection of Events produced by an InstrumentationLibrary.
message InstrumentationLibraryEvents {
  // The instrumentation library information for the events in this message.
  // Semantically when InstrumentationLibrary isn't set, it is equivalent with
  // an empty instrumentation library name (unknown).
  opentelemetry.proto.common.v1.InstrumentationLibrary instrumentation_library = 1;

  // A list of event records.
  repeated EventRecord events = 2;

  // This schema_url applies to all events in the "events" field.
  string schema_url = 3;
}

// An event record according to OpenTelemetry Event Data Model.
message EventRecord {
  // time_unix_nano is the time when the event occurred.
  // Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
  // Value of 0 indicates unknown or missing timestamp.
  fixed64 time_unix_nano = 1;

  // A value containing the body of the event record. Can be for example a human-readable
  // string message (including multi-line) describing the event in a free form or it can
  // be a structured data composed of arrays and maps of other values. [Optional].
  opentelemetry.proto.common.v1.AnyValue body = 2;

  // Additional attributes that describe the specific event occurrence. [Optional].
  repeated opentelemetry.proto.common.v1.KeyValue attributes = 3;
  uint32 dropped_attributes_count = 4;

  // Flags, a bit field. 8 least significant bits are the trace flags as
  // defined in W3C Trace Context specification. 24 most significant bits are reserved
  // and must be set to 0. Readers must not assume that 24 most significant bits
  // will be zero and must correctly mask the bits when reading 8-bit trace flag (use
  // flags & TRACE_FLAGS_MASK). [Optional].
  fixed32 flags = 5;

  // A unique identifier for a trace. All events from the same trace share
  // the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
  // is considered invalid. Can be set for events that are part of request processing
  // and have an assigned trace id. [Optional].
  bytes trace_id = 6;

  // A unique identifier for a span within a trace, assigned when the span
  // is created. The ID is an 8-byte array. An ID with all zeroes is considered
  // invalid. Can be set for events that are part of a particular processing span.
  // If span_id is present trace_id SHOULD be also present. [Optional].
  bytes span_id = 7;
}
